import { findStartEnd, generateComment, insertComment } from '../../fw/db/descriptiongen'
import { ModelType } from '../../fw/db/models'
import { Field, Fields } from '../../fw/db/querying/fields'

test('find start and end loc', () => {
    // @ts-ignore
    const mockModel: ModelType = {
        _modelName: 'Instrument'
    }
    const withoutPreviousCommentTs = `import { registerModel } from 'semla'
import * as mime from 'mime-types'
import { RemoteFile } from './RemoteFile'

export class Instrument extends FileBase {
    static setup(m) {
`

    const locationsWithoutTs = findStartEnd(withoutPreviousCommentTs, mockModel)

    expect(locationsWithoutTs.start).toBe(114)
    expect(locationsWithoutTs.end).toBe(locationsWithoutTs.start)

    const withoutPreviousCommentJs = `import { BaseModel } from './BaseModel.js'
import { registerModel } from 'semla'

class Instrument extends BaseModel {`

    const locationsWithoutJs = findStartEnd(withoutPreviousCommentJs, mockModel)

    expect(locationsWithoutJs.start).toBe(80)
    expect(locationsWithoutJs.end).toBe(locationsWithoutJs.start)

    const withPreviousComment = `import { registerModel } from 'semla'
import * as mime from 'mime-types'
import { RemoteFile } from './RemoteFile'

/** This comment was generated by semla. Please don't change it manually
  * Stuff goes here
  */ 
export class Instrument extends FileBase {
        static setup(m) {`

    const locationsWithComment = findStartEnd(withPreviousComment, mockModel)

    expect(locationsWithComment.start).toBe(115)
    expect(locationsWithComment.end).toBe(115+96)

})

test('Test comment generation', async () => {
    const fields = new Fields([
        Field.FromDb('id', 'INTEGER'),
        Field.FromDb('db_name', 'INTEGER')
    ])
    // @ts-ignore
    const mockModel: ModelType = {
        _modelName: 'Instrument',
        _fields: fields
    }

    const generated = await generateComment(mockModel, '\n')

    expect(generated).toBe(`/** This comment was generated by semla. Please don't change it
  * manually as your changes may be overwritten

  * id: id: INTEGER
  * dbName: db_name: INTEGER
  */
`)
})

test('Test comment insertion', () => {
    const cmt = insertComment('abcdefghijklmnopqrstuvwxyz', 3, 5, '_no alphabet!_')
    expect(cmt).toBe('abc_no alphabet!_fghijklmnopqrstuvwxyz')
})
